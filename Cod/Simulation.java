package org.yourorghere;
/*http://pmg.org.ru/nehe/nehe39.htm */
/*¬ каждой итерации происходит один и тот же процесс. —илы обнул€ютс€, 
добавл€ютс€ все воздействующие силы, рассчитываетс€ нова€ скорость и положение. 
Ётот процесс продолжаетс€ до тех пор, пока измен€етс€ врем€. 
ќн организован в классе Simulation.*/
abstract public class Simulation {
    public int numOfMasses=0;//количество масс в котейнере
    public Mass[] masses=new Mass[numOfMasses];//массив масс
//------------------------------------------------------------------------------
    //конструктор
    Simulation(int numOfMasses, double m){
        this.numOfMasses=numOfMasses;
        masses = new Mass[numOfMasses];//создаем массив
        // —оздаем Mass и заносим его в массив
        for (int i=0;i<numOfMasses;i++){
            masses[i]=new Mass(m);
        }
    }
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------    
    Mass getMass(int index){
     if (index<0 || index>numOfMasses) {return null;}
     else return masses[index];
    }
//------------------------------------------------------------------------------
    /*ѕроцедура симул€ции имеет три шага:
 
      1. init() Ц устанавливаем силу (Mass->force) в 0
      2. solve() Ц примен€ем силы
      3. simulate(float dt) Ц конец итерации
    */
//------------------------------------------------------------------------------
    void forceSetToZeroForAllMasses(){
        for(int i=0;i<numOfMasses;i++){
            masses[i].forceSetToZero();
        }
    }
//------------------------------------------------------------------------------
    //примен€ем силы
    abstract void solve();
        /*Ќет кода т.к. в базовом классе у нас нет сил
        в других контейнерах мы переопределим этот метод*/
    
//------------------------------------------------------------------------------
    //итераци€ дл€ каждой маcc
    //метод вычисл€ет скорость и положение массы, в следующий момент времени исход€ из примененных сил и прошедшего времени.
    void simulate (double dt){
        for(int i=0;i<numOfMasses;i++){
            masses[i].simulate(dt);
        }
    }
//------------------------------------------------------------------------------
    //объединим процедуру симул€ции в один метод
    void operate (double dt){
       forceSetToZeroForAllMasses(); 
       solve();
       simulate(dt);
    }
//------------------------------------------------------------------------------
    //1-симмул€ци€ движени€ тела с посто€нной скоростью
    //2-симмул€ци€ движени€ тела под действием сил гравитации
    //3-симмул€ци€ движени€ тела на пружине
    //4-симмул€ци€ веревки
    abstract int GetTypeOfSimulation();
    
}
